<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<?xml-stylesheet type="text/css" href="tomato.css" ?>
<% css('svg-css'); %>
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" onload="init(evt)" onmousemove="mMove(evt)" onclick="mClick(evt)" width="100%" height="100%" id="svg">
<style type="text/css">
* {
cursor: pointer;
}
</style>
<% css('svg-js'); %>
<script type="text/ecmascript"><![CDATA[
//	<% nvram("web_css,web_adv_scripts"); %>
var week = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];
var qd = {};
location.search.substr(1).split("&").forEach(function(item) {qd[item.split("=")[0]] = item.split("=")[1]});
var vWidth = parseInt(qd['vwidth']);
var vHeight = parseInt(qd['vheight']);
var pointLoc = 0;
var crossH = 0;
var crossV = 0;
var maxV = 0;
var maxL = 0;
var time24 = 0;
var advX = 1;
var interval = 0;
var hours = 0;
var xpstVis = 1;
var ignoreNext = 0;
var eraseL = 0;
var samp = 1;
function E(id) {
return document.getElementById(id);
}
function pad(n) {
n = n.toString();
while (n.length < 2) n = '0'+n;
return n;
}
function xps(n) {
if (unit == 0) {
n /= 1024;
return (n * 8).toFixed(2)+' kbit/s ('+n.toFixed(2)+' KB/s)';
}
else {
n /= (1024 * 1024);
return (n * 8).toFixed(2)+' Mbit/s ('+n.toFixed(2)+' MB/s)';
}
}
function setText(e, text) {
/* Adobe/IE doesn't do textContent= */
if (e.firstChild)
e.removeChild(e.firstChild);
e.appendChild(document.createTextNode(text));
}
function init(evt) {
var n;
if (typeof(svgDocument) == 'undefined')
svgDocument = evt.target.ownerDocument;
crossX = E('svg-crossX');
crossY = E('svg-crossY');
polyRx = E('polyRx');
polyTx = E('polyTx');
pointTextBack = E('pointTextBack');
pointText = E('pointText');
pointG = E('pointGroup');
crossTextBack = E('crossTextBack');
crossText = E('svg-crossText');
crossTime = E('svg-crossTime');
maxText = E('svg-maxText');
tickLines = [];
for (n = 0; n < 24; ++n)
tickLines[n] = E('tick'+n);
tickHours = [];
for (n = 0; n < 12; ++n)
tickHours[n] = E('h'+n);
xpst = [];
for (n = 0; n < 3; ++n)
xpst[n] = E('xpst'+n);
time24 = ((new Date(2000, 0, 1, 23, 0, 0, 0)).toLocaleString().indexOf('23') != -1);
top.updateSVG = updateSVG;
top.svgReady = 1;
top.initData();
if (nvram.web_adv_scripts == 1) {
if (typeof resize_graph !== 'undefined')
resize_graph();
}
}
function drawData(poly, data, mode, color) {
var i;
var pt;
var x, y;
var d, j;
if (data.length == 0)
return;
x = 0;
if (mode == 0) {
poly.setAttribute('fill-opacity', '0.5');
pt = '0,'+vHeight;
}
else {
poly.setAttribute('fill-opacity', '0');
pt = '';
}
poly.setAttribute('stroke', color);
poly.setAttribute('fill', color);
for (i = data.length - maxL; i < data.length; ++i) {
if (i < 0)
d = 0;
else if (i >= samp) {
d = 0;
for (j = samp - 1; j >= 0; --j)
d += data[i - j];
d /= (dataDiv * samp);
}
else
d = data[i] / dataDiv;
y = (vHeight - Math.floor((d * vHeight) / maxV));
pt += ' '+Math.floor(x)+','+y;
x += advX;
}
pt += ' '+(vWidth+5)+','+y+' '+(vWidth + 10)+','+vHeight;
poly.setAttribute('points', pt);
}
function updateSVG(rxData, txData, maxValue, mode, rxColor, txColor, intv, maxLen, dataD, avgSamp, unitSamp, clock) {
var x, y, z, i;
var v, e;
maxV = maxValue;
interval = intv;
maxL = maxLen;
advX = vWidth / maxL;
dataDiv = dataD;
samp = avgSamp;
unit = unitSamp;
tockD = clock;
tock = tockD.getTime();
if (intv < 60) {
/* realtime */
x = z = (vWidth / 5);
for (i = 0; i < 4; ++i) {
tickLines[i].setAttribute('x1', Math.round(x));
tickLines[i].setAttribute('x2', Math.round(x));
x += z;
}
}
else {
advM = (60 / interval) * advX;
x = (60 - tockD.getMinutes()) * advM;
v = advM * 60;
for (i = 0; i < 24; ++i) {
z = Math.round(x);
y = (new Date(tock - (Math.round((vWidth - z - 1) / advX) * interval * 1000))).getHours();
x += v;
e = tickLines[i];
e.setAttribute('x1', z);
e.setAttribute('x2', z);
e.setAttribute('class', (y & 1) ? 'svg-line a' : 'svg-line b');
if ((y & 1) == 0) {
e = tickHours[i >> 1];
e.setAttribute('x', z);
z = y % 24;
if (!time24) {
if (z < 12) {
if (z == 0) z = 12;
z += ' am';
}
else {
z -= 12;
if (z == 0) z = 12;
z += ' pm';
}
}
setText(e, z);
}
}
}
if (maxV <= 0) {
polyRx.setAttribute('points', '');
polyTx.setAttribute('points', '');
return;
}
if (crossV > 0)
drawCross(crossH, vHeight - Math.floor((crossV / maxV) * vHeight));
drawData(polyRx, rxData, mode, rxColor);
drawData(polyTx, txData, mode, txColor);
setText(maxText, xps(maxV)+' >');
setText(xpst[0], xps(maxV * 0.75));
setText(xpst[1], xps(maxV * 0.5));
setText(xpst[2], xps(maxV * 0.25));
if (eraseL > 0) {
if (--eraseL == 0)
pointG.setAttribute('display', 'none');
}
}
function vY(y) {
return maxV - (maxV * (y / vHeight));
}
function pointTime(x) {
var t, hh, h, s;
t = new Date(tock - (Math.round((vWidth - x - 1) / advX) * interval * 1000));
h = t.getHours();
s = week[t.getDay()]+' ';
if (time24)
s += pad(h)+':'+pad(t.getMinutes());
else {
hh = h % 12;
s += pad((hh == 0) ? 12 : hh)+':'+pad(t.getMinutes())+((h < 12) ? ' am' : ' pm');
}
return s;
}
function mMove(evt) {
var x;
if (maxV <= 0)
return;
if (evt.clientX > (vWidth - 210)) {
if (pointLoc == 0) {
if (evt.clientY < 30) {
pointLoc = 1;
pointG.setAttribute('y', (vHeight - 25));
}
}
else {
if (evt.clientY > (vHeight - 30)) {
pointLoc = 0;
pointG.setAttribute('y', 5);
}
}
}
setText(pointText, pointTime(evt.clientX)+' / '+xps(vY(evt.clientY)));
if (eraseL == 0)
pointG.setAttribute('display', 'block');
x = pointText.getComputedTextLength();
pointG.setAttribute('x', (vWidth - x) - 20);
pointG.setAttribute('width', x + 14);
pointTextBack.setAttribute('width', x + 14);
eraseL = 5;
}
function setXY(e, x, y) {
e.setAttribute('x', x);
e.setAttribute('y', y);
}
function drawCross(x, y) {
var n;
crossX.setAttribute('x1', x - 10);
crossX.setAttribute('x2', x + 10);
crossX.setAttribute('y1', y);
crossX.setAttribute('y2', y);
crossY.setAttribute('x1', x);
crossY.setAttribute('x2', x);
crossY.setAttribute('y1', y - 10);
crossY.setAttribute('y2', y + 10);
n = Math.max(crossText.getComputedTextLength(), crossTime.getComputedTextLength()) + 20;
crossTextBack.setAttribute('width', n);
if (x > (vWidth - n - 10)) {
crossText.setAttribute('style', 'text-anchor:end');
crossTime.setAttribute('style', 'text-anchor:end');
crossTextBack.setAttribute('x', (x - n) - 10);
x -= 20;
}
else {
crossText.setAttribute('style', '');
crossTime.setAttribute('style', '');
crossTextBack.setAttribute('x', x + 10);
x += 20;
}
crossTextBack.setAttribute('y', y - 17);
setXY(crossTime, x, y - 5);
setXY(crossText, x, y + 10);
}
function mClick(evt) {
if (ignoreNext) {
ignoreNext = 0;
return;
}
if (maxV <= 0)
return;
crossH = evt.clientX;
crossV = vY(evt.clientY);
setText(crossText, xps(crossV));
setText(crossTime, pointTime(crossH));
E('cross').setAttribute('display', (evt.clientY > (vHeight - 20)) ? 'none' : 'block');
drawCross(evt.clientX, evt.clientY);
}
function toggleXpst() {
E('svg-xpst').setAttribute('display', (xpstVis ^= 1) ? 'block' : 'none');
ignoreNext = 1;
}
]]></script>
<rect x="0" y="0" width="100%" height="100%" class="svg-rect" />
<line x1="0" y1="50%" x2="100%" y2="50%" class="svg-line" />
<line x1="0" y1="25%" x2="100%" y2="25%" class="svg-line" />
<line x1="0" y1="75%" x2="100%" y2="75%" class="svg-line" />
<line x1="0" y1="0%" x2="0" y2="100%" id="tick0" class="svg-line" />
<line x1="0" y1="0%" x2="0" y2="100%" id="tick1" class="svg-line" />
<line x1="0" y1="0%" x2="0" y2="100%" id="tick2" class="svg-line" />
<line x1="0" y1="0%" x2="0" y2="100%" id="tick3" class="svg-line" />
<line x1="0" y1="0%" x2="0" y2="100%" id="tick4" class="svg-line" />
<line x1="0" y1="0%" x2="0" y2="100%" id="tick5" class="svg-line" />
<line x1="0" y1="0%" x2="0" y2="100%" id="tick6" class="svg-line" />
<line x1="0" y1="0%" x2="0" y2="100%" id="tick7" class="svg-line" />
<line x1="0" y1="0%" x2="0" y2="100%" id="tick8" class="svg-line" />
<line x1="0" y1="0%" x2="0" y2="100%" id="tick9" class="svg-line" />
<line x1="0" y1="0%" x2="0" y2="100%" id="tick10" class="svg-line" />
<line x1="0" y1="0%" x2="0" y2="100%" id="tick11" class="svg-line" />
<line x1="0" y1="0%" x2="0" y2="100%" id="tick12" class="svg-line" />
<line x1="0" y1="0%" x2="0" y2="100%" id="tick13" class="svg-line" />
<line x1="0" y1="0%" x2="0" y2="100%" id="tick14" class="svg-line" />
<line x1="0" y1="0%" x2="0" y2="100%" id="tick15" class="svg-line" />
<line x1="0" y1="0%" x2="0" y2="100%" id="tick16" class="svg-line" />
<line x1="0" y1="0%" x2="0" y2="100%" id="tick17" class="svg-line" />
<line x1="0" y1="0%" x2="0" y2="100%" id="tick18" class="svg-line" />
<line x1="0" y1="0%" x2="0" y2="100%" id="tick19" class="svg-line" />
<line x1="0" y1="0%" x2="0" y2="100%" id="tick20" class="svg-line" />
<line x1="0" y1="0%" x2="0" y2="100%" id="tick21" class="svg-line" />
<line x1="0" y1="0%" x2="0" y2="100%" id="tick22" class="svg-line" />
<line x1="0" y1="0%" x2="0" y2="100%" id="tick23" class="svg-line" />
<text x="0" y="98%" class="svg-tickH" id="h0" />
<text x="0" y="98%" class="svg-tickH" id="h1" />
<text x="0" y="98%" class="svg-tickH" id="h2" />
<text x="0" y="98%" class="svg-tickH" id="h3" />
<text x="0" y="98%" class="svg-tickH" id="h4" />
<text x="0" y="98%" class="svg-tickH" id="h5" />
<text x="0" y="98%" class="svg-tickH" id="h6" />
<text x="0" y="98%" class="svg-tickH" id="h7" />
<text x="0" y="98%" class="svg-tickH" id="h8" />
<text x="0" y="98%" class="svg-tickH" id="h9" />
<text x="0" y="98%" class="svg-tickH" id="h10" />
<text x="0" y="98%" class="svg-tickH" id="h11" />
<text x="0" y="98%" class="svg-tickH" id="h12" />
<g id="svg-xpst">
<text x="18" y="25%" id="xpst0" />
<text x="18" y="50%" id="xpst1" />
<text x="18" y="75%" id="xpst2" />
</g>
<polyline id="polyTx" style="stroke-width:1" points="" />
<polyline id="polyRx" style="stroke-width:1" points="" />
<svg id="pointGroup" x="87%" y="5" width="200" height="18" display="none">
<rect x="0" y="0" width="200" height="18" id="pointTextBack" class="svg-textback" />
<text x="50%" y="50%" text-anchor="middle" id="pointText" class="svg-text" dy=".3em" />
</svg>
<rect x="0" y="0" height="100%" class="svg-textback-vertical" onclick="toggleXpst()"/>
<text x="-2%" y="12" transform="rotate(-90)" text-anchor="end" id="svg-maxText" onclick="toggleXpst()"/>
<g id="cross" display="none">
<line x1="0" y1="0" x2="0" y2="0" id="svg-crossX" />
<line x1="0" y1="0" x2="0" y2="0" id="svg-crossY" />
<rect x="0" y="-100" width="10" height="35" id="crossTextBack" class="svg-textback" />
<text x="0" y="-50" id="svg-crossTime" />
<text x="0" y="0" id="svg-crossText" />
</g>
</svg>
