#!/bin/sh

#
# Copyright (C) 2011 shibby
#
# - changes/fixes
# Copyright (C) 2018 - 2019 by pedro
#


PREFIX="$1"

PID=$$
PIDFILE="/var/run/switch3g_$PREFIX.pid"
DIAGSFILE="/tmp/switch3g_$PREFIX.diags"
MODE=$(nvram get "$PREFIX"_proto)
DEVNR=$(nvram get "$PREFIX"_modem_dev)
LOGS="logger -t switch3g[$PID]"


[ -z "$PREFIX" ] && {
	echo "usage: switch3g INTERFACE [signal]"
	exit 0
}

[ ! "$MODE" == "ppp3g" ] && {
	exit 0
}


switchMode() {
	VENDOR="" PRODUCT="" MODULE="" DEVICENAME="" TTYS="" ALREADYFOUND=0	# global
	local COUNT=1 SWITCHED=0 DVDP=0 TTYS_PATH="" PATHDEV SWITCH DEVICES IFN_BEFORE DV DP DB DG

	# search for DEVICENAME via active TTYs
	for DEVICENAME in $(ls /sys/bus/usb/devices/ | grep -v ":" | grep "-"); do

		PATHDEV="/sys/bus/usb/devices/$DEVICENAME"
		[ -f $PATHDEV/idVendor -a -f $PATHDEV/idProduct -a -f $PATHDEV/uevent ] || continue	# skip

		TTYS=$(ls -d $PATHDEV/${DEVICENAME}*/tty?* 2>/dev/null | sed -e "s/.*\/\//.*/g" -e "s/.*\//\/dev\//g" | tr "\n" " " | sed -e "s/  */ /g" -e "s,^ *,,; s, *$,,")

		[ -n "$TTYS" ] && {
			VENDOR=$(cat "$PATHDEV"/idVendor)
			PRODUCT=$(cat "$PATHDEV"/idProduct)

			TTYS_PATH=$(ls -d $PATHDEV/${DEVICENAME}*/tty?* 2>/dev/null | sed 's/\/tty.*/\/uevent/g')
			MODULE=$(cat $TTYS_PATH 2>/dev/null | grep ^DRIVER | cut -d "=" -f2 | head -n1)
			findPath		# MODULE --> MPATH
			echo "$VENDOR $PRODUCT" > $MPATH
			nvram set "$PREFIX"_modem_type="$MODULE"

			$LOGS "3G MODEM ready ($VENDOR:$PRODUCT) - DIAG interface(s) found ("$TTYS") - using already loaded $MODULE module"

			ALREADYFOUND=1
			break
		}
	done

	[ "$ALREADYFOUND" -eq 0 ] && {
		$LOGS "3G MODEM - detecting ..."

		# detect modem
		DEVICES=$(lsusb | awk '{print $6}')

		for SWITCH in $DEVICES; do
			[ "$(ls /etc/usb_modeswitch.d/"$SWITCH" 2> /dev/null | wc -l)" -eq 1 ] && {
				# search for DEVICENAME & other data
				for DEVICENAME in $(ls /sys/bus/usb/devices/ | grep -v ":" | grep "-"); do
					PATHDEV="/sys/bus/usb/devices/$DEVICENAME"
					[ -f $PATHDEV/idVendor -a -f $PATHDEV/idProduct -a -f $PATHDEV/uevent ] || continue	# skip

					DV=$(cat "$PATHDEV"/idVendor)					# vendor
					DP=$(cat "$PATHDEV"/idProduct)					# product
					DB=$(grep -s ^BUSNUM "$PATHDEV"/uevent | cut -d "=" -f2)	# BUSNUM
					DG=$(grep -s ^DEVNUM "$PATHDEV"/uevent | cut -d "=" -f2)	# DEVNUM

					[ "$DV" == "$(echo "$SWITCH" | cut -d ":" -f1)" -a "$DP" == "$(echo "$SWITCH" | cut -d ":" -f2)" ] && {		# self
						DVDP=1
						break
					}
				done

				[ "$DVDP" -eq 1 ] && {
					# in some cases it needs more time
					COUNT=1
					while [ "$COUNT" -lt 5 ]; do
						sleep 1
						[ -s $PATHDEV/bNumInterfaces ] && {
							IFN_BEFORE=$(cat "$PATHDEV"/bNumInterfaces)
							break
						}
						COUNT=$((COUNT+1))
					done

					$LOGS "3G MODEM FOUND - $SWITCH - switching ..."

					/usr/sbin/usb_modeswitch -Q -c /etc/usb_modeswitch.d/$SWITCH -v $DV -p $DP -b $DB -g $DG

					# need few seconds before modem will be detected once again after switch
					COUNT=1
					while [ "$COUNT" -lt 15 ]; do
						sleep 1
						[ -s $PATHDEV/bNumInterfaces ] && {
							[ "$(cat "$PATHDEV"/bNumInterfaces)" -gt "$IFN_BEFORE" ] && break
						}
						COUNT=$((COUNT+1))
					done
					sleep 1

					VENDOR=$(cat /etc/usb_modeswitch.d/"$SWITCH" | grep TargetVendor | cut -d "=" -f2 | cut -d "x" -f2)
					[ -z "$VENDOR" ] && VENDOR=$(cat "$PATHDEV"/idVendor)

					PRODUCT=$(cat "$PATHDEV"/idProduct)
					[ -n "$PRODUCT" ] && {
						$LOGS "3G MODEM ready - $VENDOR:$PRODUCT"
						SWITCHED=1
						break
					}
				}
			}
		done

		[ "$SWITCHED" -eq 0 ] && {
			$LOGS "3G MODEM not found in USB_ModeSwitch database - already switched? Loading modules..."
		}
	}
}

isDiag() {
	TTYS=$(ls -d $PATHDIAG/$DEVICENAME/${DEVICENAME}*/tty?* 2>/dev/null | sed -e "s/.*\/\//.*/g" -e "s/.*\//\/dev\//g" | tr "\n" " " | sed -e "s/  */ /g" -e "s,^ *,,; s, *$,,")
}

searchDiag() {
	local MODULES="cdc-acm option sierra"
	local IS_MLOADED=0 PATHDIAG="/sys/bus/usb/devices"
	local PATHDEV

	[ -z "$VENDOR" ] && VENDOR=$(cat "$PATHDIAG"/"$DEVICENAME"/idVendor)
	[ -z "$PRODUCT" ] && PRODUCT=$(cat "$PATHDIAG"/"$DEVICENAME"/idProduct)

	[ -z "$TTYS" ] && {
		for MODULE in $MODULES; do
			modprobe $MODULE
			sleep 1

			isDiag # --> TTYS
			[ -z "$TTYS" ] && {
				$LOGS "3G MODEM ($MODULE) not found ..."
				modprobe -r $MODULE
				sleep 1
			} || {
				# found
				break
			}
		done

		[ -n "$TTYS" ] && {
			$LOGS "3G MODEM found - using $MODULE module"
		} || {
			$LOGS "3G MODEM not found by $MODULES module. Trying usbserial ..."

			IS_MLOADED=$(lsmod | grep usbserial | wc -l)
			[ "$IS_MLOADED" -gt 0 ] && {
				echo "$VENDOR $PRODUCT" > /sys/bus/usb-serial/drivers/generic/new_id
			} || {
				[ -n "$VENDOR" -a -n "$PRODUCT" ] && {
					$LOGS "3G MODEM - loading usbserial module ($VENDOR:$PRODUCT)"
					insmod usbserial vendor=0x$VENDOR product=0x$PRODUCT
				} || {
					# VENDOR/PRODUCT unknown, so try for every possible device...
					for DEVICENAME in $(ls /sys/bus/usb/devices/ | grep -v ":" | grep "-"); do
						PATHDEV="$PATHDIAG/$DEVICENAME"
						[ -f $PATHDEV/idVendor -a -f $PATHDEV/idProduct -a -f $PATHDEV/uevent ] || continue # skip

						VENDOR=$(cat "$PATHDEV"/idVendor)	# vendor
						PRODUCT=$(cat "$PATHDEV"/idProduct)	# product
						$LOGS "3G MODEM - try to load usbserial module ($VENDOR:$PRODUCT) for device $DEVICENAME ..."

						modprobe -r usbserial
						insmod usbserial vendor=0x$VENDOR product=0x$PRODUCT
						sleep 1
						isDiag # --> TTYS
						[ -n "$TTYS" ] && {
							# found
							$LOGS "3G MODEM found - using usbserial module"
							break
						}
					done
				}
				sleep 1

				isDiag # --> TTYS
				[ -n "$TTYS" ] && MODULE="usbserial"
			}
		}
	}

	[ -z "$TTYS" ] && {
		nvram set "$PREFIX"_modem_type=""
		[ "$(nvram get mwan_cktime)" -gt 0 ] && {
			watchdog add
			wayOut "3G MODEM not found - watchdog enabled"
		} || {
			watchdog del
			wayOut "3G MODEM not found - connection process terminated!"
		}
	} || {
		[ "$ALREADYFOUND" -eq 0 ] && $LOGS "3G MODEM ready - DIAG interface(s) found ("$TTYS")"

		echo $TTYS > $DIAGSFILE
		nvram set "$PREFIX"_modem_type="$MODULE"
	}
}

findPath() {
	if [ "$MODULE" == "cdc-acm" ]; then
		MPATH="/sys/bus/usb/drivers/cdc_acm/new_id"
	elif [ "$MODULE" == "option" ]; then
		MPATH="/sys/bus/usb-serial/drivers/option1/new_id"
	elif [ "$MODULE" == "sierra" ]; then
		MPATH="/sys/bus/usb-serial/drivers/sierra/new_id"
	elif [ "$MODULE" == "usbserial_generic" ]; then
		MPATH="/sys/bus/usb-serial/drivers/generic/new_id"
		MODULE="usbserial"
	else
		MPATH="/dev/null"
	fi
}

setPIN() {
	local PIN=$(nvram get "$PREFIX"_modem_pin)
	local IS_PIN=$(nvram get "$PREFIX"_modem_pin | wc -w)
	local IS_DONE=0 PINVAL DEVALL i

	[ "$IS_PIN" -eq 1 ] && {
		DEVALL="$DEVNR $(cat "$DIAGSFILE" | sed "s~"$DEVNR"~~")"

		for i in $DEVALL; do	# find working interface
			[ -z $(MODE="ATI" gcom -d "$i" -s /etc/gcom/setverbose.gcom | grep "OK" | tr -d '\r') ] && {
				sleep 2
				continue
			}

			PINVAL=$(PINCODE="$PIN" gcom -d "$i" -s /etc/gcom/setpin.gcom)
			[ "$(echo "$PINVAL" | grep successfully | wc -l)" -eq 1 ] && {
				IS_DONE=1
				$LOGS "3G MODEM - PIN successfully verified"
			}
			# try only once on working interface (do not lock the sim)
			break
		done
	}

	[ "$IS_PIN" -eq 1 -a "$IS_DONE" -ne 1 ] && {
		watchdog del
		wayOut "3G MODEM - SIM locked - connection process terminated!"
	} || {
		$LOGS "3G MODEM - SIM ready"
	}
}

checkPid() {
	local PRIORITY="$1" PIDNO

	[ -f $PIDFILE ] && {
		PIDNO=$(cat $PIDFILE)
		cat "/proc/$PIDNO/cmdline" > /dev/null 2>&1

		[ $? -eq 0 ] && {
			$LOGS "3G MODEM - another process in action - exiting"
			exit 0
		} || {
			[ "$PRIORITY" -eq 0 ] && return
			# Process not found assume not running
			echo $PID > $PIDFILE
			[ $? -ne 0 ] && {
				$LOGS "3G MODEM - could not create PID file"
				exit 0
			}
		}
	} || {
		[ "$PRIORITY" -eq 0 ] && return
		echo $PID > $PIDFILE
		[ $? -ne 0 ] && {
			$LOGS "3G MODEM - could not create PID file"
			exit 0
		}
	}
}

wayOut() {
	local TEXT="$1"
	[[ -z $TEXT ]] && TEXT="3G Modem - exiting"

	$LOGS "$TEXT"
	rm -f $PIDFILE > /dev/null 2>&1
	exit 0
}


###################################################


[ "$2" == "signal" ] && {
	wwansignal $PREFIX
} || {
	checkPid 1
	switchMode
	searchDiag
	setPIN
	rm -f $PIDFILE > /dev/null 2>&1
}
